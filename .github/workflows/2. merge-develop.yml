name: Criar branch release e PR develop → release

on:
  pull_request:
    branches:
      - develop
    types: [closed]

jobs:
  create-release-and-pr:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checar repositório
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configurar Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@users.noreply.github.com"

      - name: Buscar branches remotas
        run: git fetch --all --prune

      - name: Calcular versão da release
        id: calculate_version
        run: |
          # Buscar todas as branches remotas que contenham release/ e extrair a versão após a última /
          release_branches=$(git ls-remote --heads origin "*/release/*" | awk -F'/' '{print $NF}' | sort -V || true)

          if [ -z "$release_branches" ]; then
            latest_version="0.0.0"
            echo "Nenhuma release encontrada. Usando versão inicial: $latest_version"
          else
            latest_version=$(echo "$release_branches" | tail -n1)
            echo "Última versão encontrada: $latest_version"
          fi

          # Separar a versão em major, minor e patch
          IFS='.' read -r major minor patch <<< "$latest_version"
          echo "Versão detalhada: Major=$major, Minor=$minor, Patch=$patch"

          # Detectar tipo de branch de origem
          SOURCE_BRANCH="${{ github.event.pull_request.head.ref }}"

          if [[ "$SOURCE_BRANCH" == feature/* ]]; then
            minor=$((minor + 1))
            patch=0
          elif [[ "$SOURCE_BRANCH" == fix/* ]]; then
            patch=$((patch + 1))
          else
            echo "Tipo de branch desconhecido: $SOURCE_BRANCH. Esperado 'feature/*' ou 'fix/*'."
            exit 1
          fi

          new_version="$major.$minor.$patch"
          release_branch="release/$new_version"

          echo "RELEASE_VERSION=$new_version" >> $GITHUB_ENV
          echo "RELEASE_BRANCH=$release_branch" >> $GITHUB_ENV
          echo "Versão calculada: $new_version"
          echo "Branch gerada: $release_branch"

      - name: Criar branch release a partir da main
        run: |
          git fetch origin
          git checkout -b "${{ env.RELEASE_BRANCH }}" origin/main
          git push origin "${{ env.RELEASE_BRANCH }}"
          echo "Branch ${{ env.RELEASE_BRANCH }} criada com sucesso"

      - name: Criar PR develop → release
        run: |
          gh pr create \
            --title "Release ${{ env.RELEASE_VERSION }} - Desenvolvimento → Release" \
            --body "PR automática contendo as alterações da develop para ${{ env.RELEASE_BRANCH }}\n\n**Atenção:** Não fazer merge desta PR, apenas revisar as alterações." \
            --base "${{ env.RELEASE_BRANCH }}" \
            --head develop
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}


